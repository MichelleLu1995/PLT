### Starting build.
# Target: JSTEM.ml.depends, tags: { extension:ml, file:JSTEM.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules JSTEM.ml > JSTEM.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends
# Target: codegen.ml.depends, tags: { extension:ml, file:codegen.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o ast.cmo ast.ml
+ ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o ast.cmo ast.ml
File "ast.ml", line 135, characters 25-1011:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(MatrixReference _|PointerIncrement _|Dereference _)
# Target: exceptions.ml.depends, tags: { extension:ml, file:exceptions.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules exceptions.ml > exceptions.ml.depends
# Target: exceptions.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:exceptions.cmo, file:exceptions.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o exceptions.cmo exceptions.ml
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), parser, quiet }
/usr/bin/ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends
# Target: preprocess.ml.depends, tags: { extension:ml, file:preprocess.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules preprocess.ml > preprocess.ml.depends
# Target: scanner.mll, tags: { extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
/usr/bin/ocamllex -q scanner.mll
# Target: scanner.ml.depends, tags: { extension:ml, file:scanner.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { extension:ml, file:semant.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 246, characters 12-589:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Madd|Msub|Mmult|Mdiv|Meq|PlusEq)
File "codegen.ml", line 263, characters 12-584:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Madd|Msub|Mmult|Mdiv|Meq|PlusEq)
File "codegen.ml", line 220, characters 27-10086:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
MColumnAccess (_, _)
File "codegen.ml", line 148, characters 8-26:
Warning 26: unused variable type_of_identifier.
File "codegen.ml", line 176, characters 8-23:
Warning 26: unused variable get_matrix_type.
# Target: preprocess.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:preprocess.cmo, file:preprocess.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o preprocess.cmo preprocess.ml
# Target: scanner.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o semant.cmo semant.ml
+ ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o semant.cmo semant.ml
File "semant.ml", line 289, characters 102-339:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Float|String|Char|Bool|Void|Tuple|Matrix|Row|Column|MatrixTyp (_, _, _)|
RowTyp (_, _)|ColumnTyp (_, _)|TupleTyp (_, _)|RowPointer _|MatrixPointer _)
File "semant.ml", line 318, characters 102-339:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Float|String|Char|Bool|Void|Tuple|Matrix|Row|Column|MatrixTyp (_, _, _)|
RowTyp (_, _)|ColumnTyp (_, _)|TupleTyp (_, _)|RowPointer _|MatrixPointer _)
File "semant.ml", line 204, characters 17-11197:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(MColumnAccess (_, _)|MatrixReference _|PointerIncrement _|Dereference _)
File "semant.ml", line 375, characters 23-44:
Warning 10: this expression should have type unit.
File "semant.ml", line 375, characters 46-67:
Warning 10: this expression should have type unit.
# Target: JSTEM.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:JSTEM.cmo, file:JSTEM.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o JSTEM.cmo JSTEM.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o ast.cmx ast.ml
+ ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o ast.cmx ast.ml
File "ast.ml", line 135, characters 25-1011:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(MatrixReference _|PointerIncrement _|Dereference _)
# Target: exceptions.cmx, tags: { compile, extension:cmx, extension:ml, file:exceptions.cmx, file:exceptions.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o exceptions.cmx exceptions.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
File "codegen.ml", line 246, characters 12-589:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Madd|Msub|Mmult|Mdiv|Meq|PlusEq)
File "codegen.ml", line 263, characters 12-584:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Madd|Msub|Mmult|Mdiv|Meq|PlusEq)
File "codegen.ml", line 220, characters 27-10086:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
MColumnAccess (_, _)
File "codegen.ml", line 148, characters 8-26:
Warning 26: unused variable type_of_identifier.
File "codegen.ml", line 176, characters 8-23:
Warning 26: unused variable get_matrix_type.
# Target: preprocess.cmx, tags: { compile, extension:cmx, extension:ml, file:preprocess.cmx, file:preprocess.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o preprocess.cmx preprocess.ml
# Target: scanner.cmx, tags: { compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o semant.cmx semant.ml
+ ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o semant.cmx semant.ml
File "semant.ml", line 289, characters 102-339:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Float|String|Char|Bool|Void|Tuple|Matrix|Row|Column|MatrixTyp (_, _, _)|
RowTyp (_, _)|ColumnTyp (_, _)|TupleTyp (_, _)|RowPointer _|MatrixPointer _)
File "semant.ml", line 318, characters 102-339:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Float|String|Char|Bool|Void|Tuple|Matrix|Row|Column|MatrixTyp (_, _, _)|
RowTyp (_, _)|ColumnTyp (_, _)|TupleTyp (_, _)|RowPointer _|MatrixPointer _)
File "semant.ml", line 204, characters 17-11197:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(MColumnAccess (_, _)|MatrixReference _|PointerIncrement _|Dereference _)
File "semant.ml", line 375, characters 23-44:
Warning 10: this expression should have type unit.
File "semant.ml", line 375, characters 46-67:
Warning 10: this expression should have type unit.
# Target: JSTEM.cmx, tags: { compile, extension:cmx, extension:ml, file:JSTEM.cmx, file:JSTEM.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm -o JSTEM.cmx JSTEM.ml
# Target: JSTEM.native, tags: { dont_link_with, extension:native, file:JSTEM.native, link, native, ocaml, package(llvm), package(llvm.analysis), package(llvm.bitreader), package(llvm.bitwriter), package(llvm.linker), package(str), program, quiet }
ocamlfind ocamlopt -linkpkg -package str -package llvm.linker -package llvm.bitreader -package llvm.bitwriter -package llvm.analysis -package llvm ast.cmx exceptions.cmx codegen.cmx parser.cmx preprocess.cmx scanner.cmx semant.cmx JSTEM.cmx -o JSTEM.native
# Compilation successful.
